import javafx.scene.input.MouseButton;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

//Using a StackPane since they auto-center their children
//and auto-size their window to fit their largest child.
public class SudokuTile extends StackPane {

    private final double WIDTH;
    private final double HEIGHT;
    private Rectangle boarder;

    //text will store the digit to be displayed
    private Text text;

    //used by the mouseActions to increment or decrement
    //the value in text.
    int digit = 0;

    SudokuTile(double width, double height) {
        WIDTH = width;
        HEIGHT = height;
        text = new Text("");
        text.setFill(Color.RED);

        //boarder also sets the size of the StackPane
        //since it will be the largest child
        boarder = new Rectangle(getTranslateX(), getTranslateY(), WIDTH, HEIGHT);

        //setting Fill to null and then Stroke to BLACK
        //displays only the boarder of the Rectangle
        boarder.setFill(null);
        boarder.setStroke(Color.BLACK);

        //handle events from mouse clicks:
        setOnMouseClicked(event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                text.setFill(Color.BLACK);
                digitPlusPlus();
                if (digit == 0)
                    setText("");
                else
                    setText(String.valueOf(digit));
            }
            if (event.getButton() == MouseButton.SECONDARY) {
                text.setFill(Color.BLACK);
                digitMinusMinus();
                if (digit == 0)
                    setText("");
                else
                    setText(String.valueOf(digit));
            }
        });

        //Make sure our StackPane has our nodes
        getChildren().addAll(boarder, text);
    }

    public void digitPlusPlus() {
        if (digit == 9)
            digit = 0;
        else
            digit++;
    }

    public void digitMinusMinus() {
        if (digit == 0)
            digit = 9;
        else
            digit--;
    }

    public int getDigit() {
        if (text.getText().equals(""))
            return 0;
        return Integer.valueOf(text.getText());
    }

    //sets and therefore (in our case) also displays
    //our digit in this SudokoTile
    public void setText(String digit) {
        text.setText(digit);
        text.setFont(new Font(0.75 * WIDTH));
    }


    //used by transferDateBoard in SudokuBoard class
    public void makeColorBlack() {
        text.setFill(Color.BLACK);
    }

}
